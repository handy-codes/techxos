// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id           String    @id @default(uuid())
  instructorId String
  title        String    @db.Text
  subtitle     String?   @db.Text
  description  String?   @db.Text
  imageUrl     String?   @db.Text
  price        Float?
  isPublished  Boolean   @default(false)
  zoomLink     String?
  categoryId   String
  subCategoryId String
  levelId      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  category     Category    @relation(fields: [categoryId], references: [id])
  subCategory  SubCategory @relation(fields: [subCategoryId], references: [id])
  level        Level?      @relation(fields: [levelId], references: [id])
  sections     Section[]
  purchases    Purchase[]

  @@index([categoryId])
  @@index([subCategoryId])
  @@index([levelId])
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  subCategories SubCategory[]
  courses       Course[]
}

model SubCategory {
  id   String @id @default(uuid())
  name String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  courses Course[]

  @@index([categoryId])
}

model Level {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Section {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)
  locked    Boolean  @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  muxData MuxData?

  resources Resource[]

  progress Progress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  sectionId String  @unique
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId])
}

model Resource {
  id      String @id @default(uuid())
  name    String
  fileUrl String

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([sectionId])
}

model Progress {
  id        String @id @default(uuid())
  studentId String 

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([sectionId])
  @@unique([studentId, sectionId])
}

model Purchase {
  id         String   @id @default(uuid())
  userId     String
  courseId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  customerId       String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// New models for live classes
model LiveCourse {
  id          String       @id @default(cuid())
  slug        String       @unique
  title       String
  price       Float
  zoomLink    String?
  lectures    LiveLecture[]
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model LiveLecture {
  id           String      @id @default(cuid())
  date         DateTime
  title        String?
  recordingUrl String?
  isRecorded   Boolean     @default(false)
  liveCourse   LiveCourse  @relation(fields: [liveCourseId], references: [id])
  liveCourseId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([liveCourseId])
}

model Enrollment {
  id            String      @id @default(cuid())
  userId        String
  liveCourse    LiveCourse  @relation(fields: [liveCourseId], references: [id])
  liveCourseId  String
  status        String      // ACTIVE, INACTIVE
  paymentStatus String      // PAID, PENDING, FAILED
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, liveCourseId])
  @@index([liveCourseId])
}
