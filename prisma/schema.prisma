// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id           String  @id @default(uuid())
  instructorId String
  title        String  @db.Text
  subtitle     String? @db.Text
  description  String? @db.Text
  imageUrl     String? @db.Text
  price        Float?
  isPublished  Boolean @default(false)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  subCategoryId String
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])

  levelId String?
  level   Level?  @relation(fields: [levelId], references: [id])

  sections Section[]

  purchases Purchase[]

  // Add relation to CourseZoomMeeting
  zoomMeetings CourseZoomMeeting[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([categoryId])
  @@index([subCategoryId])
  @@index([levelId])
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  subCategories SubCategory[]
  courses       Course[]
}

model SubCategory {
  id   String @id @default(uuid())
  name String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  courses Course[]

  @@index([categoryId])
}

model Level {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Section {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  muxData MuxData?

  resources Resource[]

  progress Progress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  sectionId String  @unique
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId])
}

model Resource {
  id      String @id @default(uuid())
  name    String
  fileUrl String

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([sectionId])
}

model Progress {
  id        String @id @default(uuid())
  studentId String 

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([sectionId])
  @@unique([studentId, sectionId])
}

model Purchase {
  id         String @id @default(uuid())
  customerId String 

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([courseId])
  @@unique([customerId, courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  customerId       String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model LiveClassUser {
  id            String   @id @default(uuid())
  clerkUserId   String   @unique
  email         String   @unique
  role          LiveClassUserRole @default(LEARNER)
  name          String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  liveClasses   LiveClass[]

  @@index([role])
  @@index([isActive])
  @@index([clerkUserId])
}

enum LiveClassUserRole {
  HEAD_ADMIN
  ADMIN
  LECTURER
  LEARNER
  VISITOR
}

model LiveClass {
  id              String   @id @default(uuid())
  title           String
  description     String?
  zoomLink        String?  // Legacy field - to be deprecated
  zoomMeetingId   String?  // Legacy field - to be deprecated
  zoomPassword    String?  // Legacy field - to be deprecated
  startTime       DateTime
  endTime         DateTime
  isActive        Boolean  @default(false)
  price           Float
  maxStudents     Int?
  duration        Int      // Duration in weeks
  batchNumber     Int      // To track different batches
  
  // Relations
  lecturerId      String
  lecturer        LiveClassUser @relation(fields: [lecturerId], references: [id])
  purchases       LiveClassPurchase[]
  materials       LiveClassMaterial[]
  schedules       LiveClassSchedule[]
  attendance      LiveClassAttendance[]
  
  // New relations
  zoomMeetings    ZoomMeeting[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([lecturerId])
  @@index([isActive])
  @@index([startTime])
  @@index([endTime])
  @@index([price])
  @@index([batchNumber])
}

model LiveClassPurchase {
  id          String   @id @default(uuid())
  studentId   String
  liveClassId String
  liveClass   LiveClass @relation(fields: [liveClassId], references: [id])
  status      PurchaseStatus @default(PENDING)
  amount      Float
  transactionId String?
  flwRef      String?   // Flutterwave reference
  txRef       String?   // Transaction reference
  isActive    Boolean  @default(true)
  startDate   DateTime @default(now())
  endDate     DateTime
  courseName  String?
  studentEmail String?
  studentName  String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([studentId, liveClassId])
  @@index([liveClassId])
  @@index([studentId])
  @@index([status])
  @@index([isActive])
  @@index([startDate])
  @@index([endDate])
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model SystemSettings {
  id                    String   @id @default(uuid())
  siteName              String   @default("TechXOS Academy")
  siteUrl               String   @default("https://techxos.com")
  maintenanceMode       Boolean  @default(false)
  emailNotifications    Boolean  @default(true)
  studentEnrollmentNotifications Boolean @default(true)
  paymentNotifications  Boolean  @default(true)
  twoFactorAuth         Boolean  @default(false)
  sessionTimeout        Boolean  @default(true)
  sessionTimeoutMinutes Int      @default(60)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model LiveClassMaterial {
  id          String   @id @default(uuid())
  title       String
  fileUrl     String
  type        MaterialType
  liveClassId String
  liveClass   LiveClass @relation(fields: [liveClassId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([liveClassId])
  @@index([type])
}

enum MaterialType {
  DOCUMENT
  VIDEO
  ASSIGNMENT
  QUIZ
}

model LiveClassSchedule {
  id          String   @id @default(uuid())
  liveClassId String
  liveClass   LiveClass @relation(fields: [liveClassId], references: [id])
  startTime   DateTime
  endTime     DateTime
  isRecurring Boolean  @default(false)
  recurrence  String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([liveClassId])
  @@index([startTime])
  @@index([endTime])
  @@index([isRecurring])
}

model LiveClassAttendance {
  id          String   @id @default(uuid())
  liveClassId String
  liveClass   LiveClass @relation(fields: [liveClassId], references: [id])
  studentId   String
  joinTime    DateTime
  leaveTime   DateTime?
  duration    Int?
  status      AttendanceStatus @default(PRESENT)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([liveClassId])
  @@index([studentId])
  @@index([joinTime])
  @@index([status])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  LEFT_EARLY
}

model ZoomMeeting {
  id                String   @id @default(uuid())
  zoomMeetingId     String?  @unique // The actual Zoom meeting ID from Zoom API
  topic             String
  password          String?
  startTime         DateTime
  duration          Int      // Duration in minutes
  agenda            String?
  status            ZoomMeetingStatus @default(SCHEDULED)
  joinUrl           String?
  startUrl          String?  // URL that hosts can use to start the meeting
  hostEmail         String?  // Email of the user who should be the host
  
  // Relations
  liveClassId       String
  liveClass         LiveClass @relation(fields: [liveClassId], references: [id], onDelete: Cascade)
  
  // Recordings
  recordings        ZoomRecording[]
  
  // Attendance
  attendees         ZoomAttendance[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([liveClassId])
  @@index([status])
  @@index([startTime])
}

enum ZoomMeetingStatus {
  SCHEDULED
  STARTED
  ENDED
  CANCELLED
}

model ZoomRecording {
  id               String   @id @default(uuid())
  zoomRecordingId  String?  @unique
  meetingId        String
  meeting          ZoomMeeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  recordingType    String   // "shared_screen_with_speaker_view", "shared_screen", etc.
  recordingStart   DateTime
  recordingEnd     DateTime?
  fileType         String   // "MP4", "M4A", etc.
  fileSize         Int?
  playUrl          String?
  downloadUrl      String?
  status           String   // "processing", "completed", etc.
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([meetingId])
}

model ZoomAttendance {
  id               String   @id @default(uuid())
  meetingId        String
  meeting          ZoomMeeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  userId           String
  userName         String
  userEmail        String
  userRole         LiveClassUserRole
  joinTime         DateTime
  leaveTime        DateTime?
  duration         Int?     // Duration in minutes
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([meetingId])
  @@index([userId])
  @@index([joinTime])
}

// Add new model for course zoom meetings
model CourseZoomMeeting {
  id          String   @id @default(uuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  zoomLink    String   @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
  @@index([isActive])
}

model MathsDemo {
  id            String   @id @default(uuid())
  userId        String
  name          String
  class         String
  topic         String?
  trainingDate  String
  whatsappGroup Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model ClassMode {
  id        String   @id @default(uuid())
  mode      String   @default("paid") // "paid" or "demo"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
